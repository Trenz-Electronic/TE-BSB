
#Soft TEMAC GMII Constraints for Spartan-6 FPGA devices
#-------------------------------------------------------
#
#In addition to other system constraints placed in the system.ucf file, the following constraints for a single channel system are recommended specifically for the TEMAC logic. The constraints for the Ethernet pins themselves are not included here. These constraints are based on a Xilinx SP605 development board based design using soft DMA. In this case and as shown below, the LocalLink and PLB system clock are the same. If these clocks were not the same, these constraints would need to be changed accordingly. Other implementations may require different values for the delay elements.

###### Soft_TEMAC
# This is a GMII system
# LlinkTemac0_CLK = plb_v46 clk = host clock = 62.5MHz from clock generator
# Rx/Tx Client clocks are Rx/Tx PHY clocks so CORE Gen PHY clock constraints propagate to Rx/Tx client clock periods
# Time domain crossing constraints (DATAPATHONLY) are set for maximum bus frequency
# allowed by IP which is the maximum option in BSB. For lower bus frequency choice in BSB,
# the constraints are over constrained. Relaxing them for your system may reduce build time.

NET "*Soft_TEMAC*/LlinkTemac0_CLK"   TNM_NET = "LLCLK0"; #name of signal connected to TEMAC LlinkTemac0_CLK input
NET "*Soft_TEMAC*/SPLB_Clk"          TNM_NET = "PLBCLK"; #name of signal connected to TEMAC SPLB_Clk input 

# PLBCLK = LLink clock, so this is a duplicate of TS_LL_CLK0_2_TX_CLIENT_CLK0
#TIMESPEC TS_PLB_2_TXPHY0 = FROM PLBCLK      TO clk_tx_gmii 8000 ps DATAPATHONLY; #constant value based on Ethernet clock
# PLBCLK = LLink clock, so this is a duplicate of TS_TX_CLIENT_CLK0_2_LL_CLK0
#TIMESPEC TS_TXPHY0_2_PLB = FROM clk_tx_gmii  TO PLBCLK    11111 ps DATAPATHONLY; #constant value based on Ethernet clock

# PLBCLK = LLink clock, so this is a duplicate of TS_LL_CLK0_2_RX_CLIENT_CLK0
#TIMESPEC TS_PLB_2_RXPHY0 = FROM PLBCLK      TO clk_rx      8000 ps DATAPATHONLY; #varies based on period of PLB clock   
# PLBCLK = LLink clock, so this is a duplicate of TS_RX_CLIENT_CLK0_2_LL_CLK0
#TIMESPEC TS_RXPHY0_2_PLB = FROM clk_rx      TO PLBCLK      11111 ps DATAPATHONLY; #varies based on period of PLB clock

# PLBCLK = LLink clock, so this constraint is not needed
#TIMESPEC TS_PLB_2_LL0 = FROM PLBCLK  TO  LLCLK0 11111 ps DATAPATHONLY; #constant value based on LocalLink clock                                  
#TIMESPEC TS_LL0_2_PLB = FROM LLCLK0  TO  PLBCLK 11111 ps DATAPATHONLY; #varies based on period of PLB clock                                      

TIMESPEC "TS_LL_CLK0_2_RX_CLIENT_CLK0"  = FROM LLCLK0 TO clk_rx     8000 ps DATAPATHONLY; #constant value based on Ethernet clock
TIMESPEC "TS_LL_CLK0_2_TX_CLIENT_CLK0"  = FROM LLCLK0 TO clk_tx_gmii 8000 ps DATAPATHONLY; #constant value based on Ethernet clock
TIMESPEC "TS_RX_CLIENT_CLK0_2_LL_CLK0"  = FROM clk_rx      TO LLCLK0 11111 ps DATAPATHONLY; #varies based on period of LocalLink clock
TIMESPEC "TS_TX_CLIENT_CLK0_2_LL_CLK0"  = FROM clk_tx_gmii TO LLCLK0 11111 ps DATAPATHONLY; #varies based on period of LocalLink clock

# Rx Clock crossings - Some paths are analyzed by the TS_flow_rx_to_tx constraint also 
# Needed since ts_resync_flops is commented out
TIMESPEC "TS_RX_CLIENT_CLK0_2_GTX_CLK"  = FROM clk_rx     TO clk_gtx    8000 ps DATAPATHONLY; #constant value based on constant 125 MHZ GTX clock 

# This is the same as TS_TX_CLIENT_CLK0_2_LL_CLK0 when PLBCLK = LLCLK0
TIMESPEC "TS_GTX_CLK_2_PLB_CLIENT_CLK"  = FROM clk_gtx TO PLBCLK 11111 ps DATAPATHONLY; #varies based on period of PLB clock               
# This is the same as TS_LL_CLK0_2_TX_CLIENT_CLK0 when PLBCLK = LLCLK0
TIMESPEC "TS_PLB_CLIENT_CLK_2_GTX_CLK"  = FROM PLBCLK TO clk_gtx 8000 ps DATAPATHONLY; #constant value based on constant 125 MHZ GTX clock 

# Locate the Tri-Mode Ethernet MAC instance
# Changed to let tools pick
# INST "*v6_emac" LOC = "TEMAC_X0Y0";

###############################################################################
# CLOCK CONSTRAINTS
# The following constraints are required. If you choose to not use the example
# design level of wrapper hierarchy, the net names should be translated to
# match your design.
###############################################################################

############################################################
# RX Clock period Constraints                              #
############################################################
# Receiver clock period constraints: please do not relax
# Changed NET name
#NET "gmii_rx_clk"     TNM_NET = "clk_rx";
NET "*/GMII_RX_CLK_0" TNM_NET = "clk_rx";
TIMEGRP "rx_clock" = "clk_rx";
TIMESPEC "TS_rx_clk" = PERIOD "rx_clock" 8000 ps HIGH 50 %;

############################################################
# TX Clock period Constraints                              #
############################################################
# Transmitter clock period constraints: please do not relax
# Changed NET name
#NET "gtx_clk*"             TNM_NET  = "clk_gtx";
NET "*/GTX_CLK_0"          TNM_NET  = "clk_gtx";
TIMEGRP "gtx_clock"        = "clk_gtx";
TIMESPEC "TS_gtx_clk"      = PERIOD "gtx_clock" 8000 ps HIGH 50 %;

# Changed NET name
# NET "*tx_gmii_clk"   TNM_NET = "clk_tx_gmii";
NET "*tx_gmii_mii_clk_int_0" TNM_NET = "clk_tx_gmii";
TIMEGRP "tx_clock_gmii" = "clk_tx_gmii";
TIMESPEC "TS_tx_clk_gmii" = PERIOD "tx_clock_gmii" 8000 ps HIGH 50 %;
                                                                        

############################################################
# Host Clock period Constraint                             #
############################################################
# Management Clock period constraints: relax as required
# Example frequency of 90 MHz
# Changed NET name
# NET "host_clk" TNM_NET = "host_clk";
NET "*/SPLB_Clk" TNM_NET = "host_clk";
TIMEGRP "host" = "host_clk" EXCEPT "mdio_logic";
TIMESPEC "TS_host_clk" = PERIOD "host" 11111 ps HIGH 50 %;

############################################################
# External GMII Constraints                                #
############################################################
# GMII Transmitter Constraints:  place flip-flops in IOB
# Changed 'true' to 'force'
INST "*gmii_txd*"                  IOB = force;
INST "*gmii_tx_en"                 IOB = force;
INST "*gmii_tx_er"                 IOB = force;

# GMII Receiver Constraints:  place flip-flops in IOB
# Changed 'true' to 'force'
INST "*rxd_to_mac*"                IOB = force;
INST "*rx_dv_to_mac"               IOB = force;
INST "*rx_er_to_mac"               IOB = force;


############################################################
# The following are required to maximize setup/hold        #
############################################################
# Changed to add Drive strength and INST Name
INST "fpga_0_Soft_TEMAC_GMII_TXD_0_pin_?_OBUF"  SLEW = FAST;
INST "fpga_0_Soft_TEMAC_GMII_TX_EN_0_pin_OBUF"  SLEW = FAST;
INST "fpga_0_Soft_TEMAC_GMII_TX_ER_0_pin_OBUF"  SLEW = FAST;
INST "fpga_0_Soft_TEMAC_GMII_TX_CLK_0_pin_OBUF" SLEW = FAST;



############################################################
# GMII: IODELAY Constraints
############################################################
# Please modify the value of the IDELAY_VALUE
# according to your design.
# For more information on IDELAYCTRL and IODELAY, please
# refer to the Spartan-6 User Guide.
#
INST "fpga_0_Soft_TEMAC_GMII_TXD_0_pin<?>" SLEW = FAST;
INST "fpga_0_Soft_TEMAC_GMII_TX_EN_0_pin"  SLEW = FAST;
INST "fpga_0_Soft_TEMAC_GMII_TX_ER_0_pin"  SLEW = FAST;
INST "fpga_0_Soft_TEMAC_GMII_TX_CLK_0_pin" SLEW = FAST;


#ADJUST INPUT CLOCK TIMING BY DELAYIN IT
#Net fpga_0_Soft_TEMAC_GMII_RX_CLK_0_pin IFD_DELAY_VALUE = 4;


#INST *BUFGMUX_SPEED_CLK                LOC = BUFGCTRL_X0Y30;
# Group IODELAY and IDELAYCTRL components to aid placement
#Changed to remove GROUP
#INST "*delay_gmii_rx_clk"              IODELAY_GROUP = "grp1";
#INST "*delay_gmii_rx_dv"               IODELAY_GROUP = "grp1";
#INST "*delay_gmii_rx_er"               IODELAY_GROUP = "grp1";
#INST "*delay_gmii_rxd"                 IODELAY_GROUP = "grp1";
#INST "*dlyctrl"                        IODELAY_GROUP = "grp1";

#Changed to let the tools pick the LOC
#INST *BUFGMUX_SPEED_CLK                   LOC = BUFGCTRL_X0Y30;

############################################################
# For Setup and Hold time analysis on GMII inputs          #
############################################################

# Identify GMII Rx Pads only.  
# This prevents setup/hold analysis being performed on false inputs,
# eg, the configuration_vector inputs.
# Changed to remove TNM and changed INST Names
#INST "gmii_rxd<?>"                     TNM = IN_GMII; 
#INST "gmii_rx_er"                      TNM = IN_GMII;
#INST "gmii_rx_dv"                      TNM = IN_GMII;

# Define data valid window with respect to the clock.
# The spec states that, worst case, the data is valid 2 ns before the clock edge.
# The worst case it to provide zero hold time (a 2ns window in total)
#Changed to remove TIMEGRP 
#TIMEGRP "IN_GMII" OFFSET         = IN  2 ns VALID 2 ns BEFORE "gmii_rx_clk"; 
# Set to allow for 100ps setup/hold trace delay difference in relation to clock
OFFSET = IN  2.4 ns VALID 2.8 ns BEFORE "fpga_0_Soft_TEMAC_GMII_RX_CLK_0_pin"; 


############################################################
# Reset path constraints                                   #
#  These constraints add a measure of protection against   #
#  metastability and skew in the reset nets.               #
############################################################
# Changed net name in synthesis of xps_ll_temac
NET "*/I_TRIMAC_INST/RXGMIIRSTGENEN.I_SYNC_GMII_MII_RX_RESET_I/RESET_OUT*"  MAXDELAY = 6100 ps;
NET "*/I_TRIMAC_INST/I_SYNC_GMII_MII_TX_RESET_I/RESET_OUT*"                 MAXDELAY = 6100 ps;
NET "*/I_TRIMAC_INST/G_SYNC_MGMT_RESET.I_SYNC_MGMT_RESET_HOST_I/RESET_OUT*" MAXDELAY = 6100 ps;


############################################################
# Crossing of Clock Domain Constraints: please do not edit #
############################################################
# Changed net name in synthesis of xps_ll_temac
# Flow Control logic reclocking - control signal is synchronised
INST "*/I_TRIMAC_INST/I_FLOW/I_RX_PAUSE/PAUSE_REQ_TO_TX"       TNM="flow_rx_to_tx";
INST "*/I_TRIMAC_INST/I_FLOW/I_RX_PAUSE/PAUSE_VALUE_TO_TX*"    TNM="flow_rx_to_tx";
TIMESPEC "TS_flow_rx_to_tx"      = FROM "flow_rx_to_tx" TO tx_clock_gmii 8000 ps DATAPATHONLY;

# generate a group of all flops NOT in the host clock domain
TIMEGRP "all_ffs"                = FFS;
TIMEGRP "ffs_except_host"        = "all_ffs" EXCEPT "host";

# Changed net name in synthesis of xps_ll_temac
# Configuration Register reclocking
INST "*/I_TRIMAC_INST/MANIFGEN.I_MANAGEN/I_CONF/RX0_OUT*"            TNM="async_config";
INST "*/I_TRIMAC_INST/MANIFGEN.I_MANAGEN/I_CONF/RX1_OUT*"            TNM="async_config";
INST "*/I_TRIMAC_INST/MANIFGEN.I_MANAGEN/I_CONF/FC_OUT_29"           TNM="async_config";

INST "*/I_TRIMAC_INST/MANIFGEN.I_MANAGEN/I_CONF/TX_OUT*"             TNM="async_config";
INST "*/I_TRIMAC_INST/MANIFGEN.I_MANAGEN/I_CONF/FC_OUT_30"           TNM="async_config";

# Changed net name in synthesis of xps_ll_temac
# speed change config
INST "*/I_TRIMAC_INST/MANIFGEN.I_MANAGEN/I_CONF/CNFG_SPEED*"         TNM="async_config";
INST "*/I_TRIMAC_INST/I_?XGEN/*SPEED*"                               TNM="async_config";

# Changed to comment out.  
# In BSB systems the Host_clk = PLB_CLK.  Since the CORE Gen TIG'd constraints below 
# are affecting XPS_LL_TEMAC DATAPATHONLY constraints above (at start of Soft_Ethernet_MAC constraints) 
# these paths are commented out in favor of using the DATAPATHONLY constraints.  
#TIMESPEC "TS_host_clk_to_rx_clk" = FROM "host" TO "rx_clock" TIG;
#TIMESPEC "TS_host_clk_to_tx_clk" = FROM "host" TO "tx_clock_gmii" TIG;

TIMESPEC "TS_config_to_all"      = FROM "async_config" TO "ffs_except_host" TIG;

# Changed net name in synthesis of xps_ll_temac
# Address filter specific cross clocking
INST "*/I_TRIMAC_INST/I_ADDR_FILTER_TOP/dynamic_af_gen.I_DYNAMIC_CONFIG/unicast_addr_*" TNM="addr_config_to_rx";
TIMESPEC "TS_addr_config_to_rx" = FROM "addr_config_to_rx" TO "ffs_except_host" TIG;

############################################################
# Ignore paths to resync flops
############################################################
# Changed to replace TIG with DATAPATHONLY constraints
#INST "*data_sync"                      TNM = "resync_reg";
#TIMESPEC "ts_resync_flops"       = TO "resync_reg" TIG;

# Changed - Not defined in CoreGen output and not analyzed
#TIMESPEC "ts_tx_async_regs"      = TO "tx_async_reg" TIG;

############################################################
# MDIO Constraints: please do not edit                     #
############################################################

# Changed net name in synthesis of xps_ll_temac
# Place the MDIO logic in it's own timing groups
INST "*I_TEMAC*MII0*I_TRIMAC_CORE_0/I_TRIMAC_INST/I_RXGEN/ENABLE_REG"                     TNM = "mdc_falling";
INST "*I_TEMAC*MII0*I_TRIMAC_CORE_0/I_TRIMAC_INST/MANIFGEN.I_MANAGEN*MIIM_READY_INT"      TNM = "mdc_rising";
INST "*I_TEMAC*MII0*I_TRIMAC_CORE_0/I_TRIMAC_INST/MANIFGEN.I_MANAGEN*I_PHY*STATE_COUNT*"  TNM = FFS "mdc_rising";
INST "*I_TEMAC*MII0*I_TRIMAC_CORE_0/I_TRIMAC_INST/MANIFGEN.I_MANAGEN*I_PHY*MDIO_TRISTATE" TNM = "mdc_falling";
INST "*I_TEMAC*MII0*I_TRIMAC_CORE_0/I_TRIMAC_INST/MANIFGEN.I_MANAGEN*I_PHY/MDIO_OUT"      TNM = "mdc_falling";

TIMEGRP "mdio_logic"             = "mdc_rising" "mdc_falling";

TIMESPEC "TS_mdio1"              = PERIOD "mdio_logic" 400 ns;
TIMESPEC "TS_mdio2"              = FROM "mdc_rising" TO "mdc_falling" 200 ns;
TIMESPEC "TS_mdio3"              = FROM "mdio_logic" TO "host" "TS_host_clk";
TIMESPEC "TS_mdio4"              = FROM "host" TO "mdio_logic" "TS_host_clk";

# Changed net name in synthesis of xps_ll_temac
# want to TIG any timing paths to the select of the TX clock BUFGMUXs as this is always an async path
PIN "*I_CLOCK_INST*/*.BUFGMUX_SPEED_CLK.I?" TNM="clk_bufgmux";
TIMESPEC "TS_bufgmux" = FROM "async_config" TO "clk_bufgmux" TIG;
